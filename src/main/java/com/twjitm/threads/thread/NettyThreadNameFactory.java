package com.twjitm.threads.thread;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.concurrent.ThreadFactory;import java.util.concurrent.atomic.AtomicInteger;/** * @author twjitm - [Created on 2018-08-23 17:19] * @company https://github.com/twjitm/ * @jdk java version "1.8.0_77" */public class NettyThreadNameFactory implements ThreadFactory {    Logger logger = LoggerFactory.getLogger(NettyThreadNameFactory.class);    private String threadName;    private ThreadGroup threadGroup;    private AtomicInteger threadNumber = new AtomicInteger(0);    private boolean daemon;    public NettyThreadNameFactory(String threadName) {        this(threadName,false);        this.threadName = threadName;    }    public NettyThreadNameFactory(String threadName, boolean daemon) {        this.threadName = threadName;        this.daemon = daemon;        SecurityManager s = System.getSecurityManager();        threadGroup = (s != null) ? s.getThreadGroup() : Thread.currentThread()                .getThreadGroup();        this.threadName = threadName + "-thread-";        this.daemon = daemon;    }    @Override    public Thread newThread(Runnable r) {        Thread thread = new Thread(threadGroup, r, threadName                + threadNumber.getAndIncrement(), 0);        if (daemon) {            thread.setDaemon(daemon);        } else {            if (thread.isDaemon()) {                thread.setDaemon(false);            }            if (thread.getPriority() != Thread.NORM_PRIORITY) {                thread.setPriority(Thread.NORM_PRIORITY);            }        }        if(logger.isDebugEnabled()){            logger.debug("创建线程:"+threadName);        }        return thread;    }    public String getThreadName() {        return threadName;    }}