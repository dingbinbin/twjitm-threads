package com.twjitm.threads.common.executor;import com.twjitm.threads.entity.AbstractNettyTask;import com.twjitm.threads.thread.NettyThreadNameFactory;import java.util.concurrent.*;/** * @author EGLS0807 - [Created on 2018-08-24 15:43] * @company http://www.g2us.com/ * @jdk java version "1.8.0_77" * 无序队列执行器 */public class NettyUnorderThreadPollExecutor extends ThreadPoolExecutor {    public NettyUnorderThreadPollExecutor(int corePoolSize) {        super(corePoolSize, corePoolSize * 2, 30, TimeUnit.SECONDS,                new LinkedBlockingQueue<Runnable>());    }    public NettyUnorderThreadPollExecutor(String name, int corePoolSize) {        super(corePoolSize, corePoolSize * 2, 30, TimeUnit.SECONDS,                new LinkedBlockingQueue<Runnable>(), new NettyThreadNameFactory(name));    }    public NettyUnorderThreadPollExecutor(String name, int corePoolSize, int maxPoolSize) {        super(corePoolSize, maxPoolSize, 30, TimeUnit.SECONDS,                new LinkedBlockingQueue<Runnable>(), new NettyThreadNameFactory(name));    }    public NettyUnorderThreadPollExecutor(String name, int corePoolSize, int maxSize, RejectedExecutionHandler rejectedExecutionHandler) {        super(corePoolSize, maxSize, 30, TimeUnit.SECONDS,                new LinkedBlockingQueue<Runnable>(), new NettyThreadNameFactory(name), rejectedExecutionHandler);    }    public NettyUnorderThreadPollExecutor(String name, int corePoolSize, int maxSize, BlockingQueue blockingQueue, RejectedExecutionHandler rejectedExecutionHandler) {        super(corePoolSize, maxSize, 30, TimeUnit.SECONDS,                blockingQueue, new NettyThreadNameFactory(name), rejectedExecutionHandler);    }    public void executeTask(AbstractNettyTask task) {        super.execute(task);    }}